
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: cf-pv-claim
#   labels:
#     app: <env>-backend-<project>
# spec:
#   storageClassName: nfs-storage
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 500Mi
apiVersion: v1
kind: Namespace
metadata:
  name: <env>-backend-<project>
---
apiVersion: apps/v1	#与k8s集群版本有关，使用 kubectl api-versions 即可查看当前集群支持的版本
kind: Deployment	#该配置的类型，我们使用的是 Deployment
metadata:	        #译名为元数据，即 Deployment 的一些基本属性和信息
  name: <env>-backend-<project>-deployment	#Deployment 的名称
  namespace: <env>-backend-<project>
  labels:	    #标签，可以灵活定位一个或多个资源，其中key和value均可自定义，可以定义多组，目前不需要理解
    app: <env>-backend-<project>	#为该Deployment设置key为app，value为nginx的标签
    service: <env>-backend-<project>-identity
spec:	        #这是关于该Deployment的描述，可以理解为你期待该Deployment在k8s中如何使用
  replicas: 1	#使用该Deployment创建一个应用程序实例
  selector:	    #标签选择器，与上面的标签共同作用，目前不需要理解
    matchLabels: #选择包含标签app:<env>-backend-<project>的资源
      #app: <env>-backend-<project>
      service: <env>-backend-<project>-identity
  template:	    #这是选择或创建的Pod的模板
    metadata:	#Pod的元数据
      labels:	#Pod的标签，上面的selector即选择包含标签app:nginx的Pod
        app: <env>-backend-<project>
        service: <env>-backend-<project>-identity
      #annotations:
      #  dapr.io/enabled: "true"
      #  dapr.io/app-id: "identity-api"
      #  dapr.io/app-port: "80"
      #  dapr.io/log-level: "error"
      #  dapr.io/sidecar-listen-addresses: "0.0.0.0"
    spec:	    #期望Pod实现的功能（在pod中部署）
      tolerations:
       - key: node-role.kubernetes.io/master
         operator: Exists
         effect: NoSchedule
      containers:	#生成container，与docker中的container是同一种
      - name: <env>-backend-<project>-identity	#container的名称
        image: xxxx-xxxx:xx	
        imagePullPolicy: IfNotPresent
        resources:              ##CPU内存限制
            requests:
                memory: 100Mi
            limits:
                memory: 500Mi
        # volumeMounts:
        #   - name: <env>-backend-<project>-persistent
        #     mountPath: /app/appsettings.Production.json
        #     subPath: appsettings.Production.json

          # - name: sb-persistent-storage-env
          #   mountPath: /app/appsettings.json
          #   subPath: appsettings.json

      # volumes:
      #   - name: <env>-backend-<project>-persistent
      #     configMap:
      #        defaultMode: 420
      #        name: <env>-backend-config-<project>-1.0.0
      #        items:
      #          - key: appsettings.Production.json
      #            path: appsettings.Production.json

        # - name: sb-persistent-storage-env
        #   configMap:
        #      defaultMode: 420
        #      name: appsettings-<project>-1.01
        #      items:
        #        - key: appsettings.json
        #          path: appsettings.json  
          # persistentVolumeClaim:
          #    claimName: sb-pv-claim